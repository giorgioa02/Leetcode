"""
105. Construct Binary Tree from Preorder and Inorder Traversal
Binary Tree
"""

# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right

class Solution:
    def buildTree(self, preorder: List[int], inorder: List[int]) -> Optional[TreeNode]:

        #basecase: if either the preorder or inorder list is empty, there are no nodes to process
        if not preorder or not inorder:
            return None

        root = TreeNode(preorder[0]) #the first element of preorder traversal is always the root of the current subtree
        mid = inorder.index(preorder[0]) #find the index of the root in the inorder list - this divides the list into left and right subtrees

        #recursively build left subtree:
        #the elements of the preorder list from index 1 to mid correspond to the left subtree in preorder
        #the elements of the inorder list from the start to mid correspond to the left subtree in inorder
        root.left = self.buildTree(preorder[1:mid+1], inorder[:mid])

        #recursively build the right subtree:
        #the elements of the preorder list from mid+1 to the end correspond to the right subtree in preorder.
        #the elements of the inorder list from mid+1 to the end correspond to the right subtree in inorder.
        root.right = self.buildTree(preorder[mid+1:], inorder[mid+1:])
        return root
